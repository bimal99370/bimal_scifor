# -*- coding: utf-8 -*-
"""scikit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15xDlVqwAiMQzbQ3a_Vz2mu_Dfy-SQcYM
"""

import os
os.chdir('D:\code_workspace')

os.getcwd()

import pandas as pd

import numpy as np

dataset=pd.read_csv('meteorite-landings.csv')

dataset

dataset.info

dataset.describe()

dataset.dropna(inplace=True)

dataset["year"]=pd.to_datetime(dataset["year"])

dataset["mass"]=pd.to_numeric(dataset["mass"])

dataset = pd.get_dummies(dataset, columns=['fall'])

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.hist(dataset['mass'], bins=50, color='skyblue', edgecolor='black')
plt.xlabel('Mass')
plt.ylabel('Frequency')
plt.title('Distribution of Meteorite Masses')
plt.show()

plt.figure(figsize=(10, 6))
dataset['year'].dt.year.value_counts().sort_index().plot(kind='bar', color='orange')
plt.xlabel('Year')
plt.ylabel('Number of Meteorite Falls')
plt.title('Number of Meteorite Falls by Year')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

X = dataset[['year']]
y = dataset['mass']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

X_test['year'] = pd.to_datetime(X_test['year'])

X_test['year'] = X_test['year'].dt.year

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', label='Actual vs Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Actual Mass (g)')
plt.ylabel('Predicted Mass (g)')
plt.title('Actual vs Predicted Mass of Meteorites')
plt.legend()
plt.show()

import seaborn as sns
numerical_columns = dataset.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numerical_columns.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

