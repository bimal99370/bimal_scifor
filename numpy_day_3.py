# -*- coding: utf-8 -*-
"""numpy day 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1crcVIe45ZZd4TNBIqZZkyWm2HJVbCc7q
"""

import numpy as np

ary1 = np.random.randint(10,20,(2,4))

ary1.ndim

ary1.dtype

ary1.size

ary1.itemsize

ary1.size * ary1.itemsize #total memory occupied by the array

# change datatype method 1
np.array( [ [100,200,300],[111,222,333] ]  , dtype = np.float32 )

#change datatype method 2
np.float32(ary1)

#change datatype method 3
ary1.astype(int)

# for permanent change we have to store it on the same variable
ary1 = ary1.astype(int)

"""**numpy vs list**
               *numpy will occupy less memory.    numpy is very fast in exicution.
                numpy is very flexible.*

<h1> broadcasting rule </h1>
"""

a = np.arange(1,6)
a

b = np.arange(11,16)
b

c = a +b
c

d = c +5
d

a2 = np.random.randint(1,10,(2,2))

a2

b2 = np.random.randint(1,10,(2,2))
b2

c2 = a2 +b2

c2 # addition is possible because shape and dimension both are same.

a3 = np.random.randint(10,20,(2,3,4))
a3

b2

# a3 + b2 is not possible because shape and dimension boat are different

"""case - 1
        shape : same /
          dimension : same

        all the arithmetic opearation is possible

case - 2
dimension : same
shape : different

step:1
compare shapes of arrays based on the axis
either they should be same (on axis base)
or
any of them should be "1"(on axis base)
"""

#case -3
#shape:different
#dimension :different
#step-1 compare the dimension and add 1 trailing dimension based on number of dimension it is less
#step 2 step:2
#compare #shapes of arrays based on the axis
#either they should be same (on axis base)
#or
#any of them should be "1"(on axis base)

np.add(a2,b2)

np.subtract(a2,b2)

np.multiply(a2,b2) # this is array multipication

a2.dot(b2)   #this is matrix multipication

# to change the shape of array reshape,resize,transpose,swapaxis