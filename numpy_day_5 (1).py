# -*- coding: utf-8 -*-
"""numpy day 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pDEO8beWuf27eIXHDNEoDzX2e1dFIwPx
"""

import numpy as np

ary1 = np.arange(11,16)

ary1

ary2 = np.insert(ary1,1,100)

ary2

np.insert(ary1,(2,4),999,axis = None)

np.insert(ary1,3,[100,200,300])

np.insert(ary1,(1,3,4),(1,2,3),axis = None)

###2 dimension array insert

a2 = np.random.randint(10,50,(4,6))

a2

np.insert(a2,2,[1,1,1,1,1,1],axis = 0)

np.insert(a2,2,[1,1,1,1],axis = 1)

#scalar
np.insert(a2,3,999,axis=0)

np.insert(a2,3,999,axis=1)

#APPEND INTO A ARRAY
ary1

np.append(ary1,999)

np.append(ary1,[1,2,3])

np2 = np.random.randint(100,200,(3,4))

np2

np.append(np2,[[10,20,30,40]],axis = 0)

np.append(np2,[[10,20,30,40]])

np.append(np2,[[10],[20],[30]],axis = 1)

#delete from array
ary1

np.delete(ary1,1)

np2

np.delete(np2,1,axis = 0)

np2

np.delete(np2,1,axis =1)

#concatenate()

ary1

a1 = np.arange(1,6)
a1

# when dimension is same we can concatenate both errays

np.concatenate((ary1,a1))

ary3 = np.random.randint(10,15,(2,3,5))

np3 = np.random.randint(100,200,(2,3,5))

np.concatenate((ary3,np3))

np.concatenate((ary3,np3),axis = 1)

np.concatenate((ary3,np3),axis = 2)

#concatenate whwn shape is not same

a2 = np.random.randint(10,50,(4,5))
b2 = np.random.randint(50,80,(4,6))

np.concatenate((a2,b2))

np.concatenate((a2,b2),axis = 1)

#in three diamensional array

y3 = np.random.randint(10,50,(2,4,6))

z3 = np.random.randint(100,200,(2,3,6))

np.concatenate((y3,z3),axis = 0) #error

np.concatenate((y3,z3),axis = 1)

np.concatenate((y3,z3),axis = 2) #error

c2= np.random.randint(10,20,(4,5))
c2

d2= np.random.randint(30,40,(4,4))
d2

np.concatenate((c2,d2),axis = 1)

z11 = np.hstack((c2,d2))
z11
#this hstack is same as above concatente with axis = 1

#this Vstack is same as above concatente with axis = 0
y11 = np.vstack((c2.T,d2))
y11
# here we apply .T to transpose and change the shape of c2 to (5,4) so that it is possible to concatenate

#SPLIT

ary1

ary1.size

np.split(ary1,2)
# here it is error because we cant split a size of 5 array into 2

np.split(ary1,5)

np.split(y11,3)

np.split(z11,2)

z11

np.split(z11,3,axis = 1)

np.hsplit(z11,3)
#same as above
#hsplit is split with axis = 1

np.vsplit(z11,2)
#vsplit is split with axis = 0

#MIN,MAX,SORT,SUM

z11

np.min(z11)

#here axis = 0 is acting reversely so it check the minimum in every column
np.min(z11,axis = 0)

np.min(z11,axis = 1)
#cheching every rows

np.max(z11)      # same as min

np.sum(z11) #complete sum of all the values

np.sum(z11,axis = 0)

np.sum(z11,axis = 1)

#watch last 10 min again of video number 43